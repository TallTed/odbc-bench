create or replace procedure new_order_proc (
       w_id_         in integer,
       d_id_         in integer,
       c_id_         in integer,
       o_ol_cnt_     in integer,
       o_all_local_  in integer,
       i_id1_   in integer, s_w_id1_   in integer, ol_qty1_   in integer,
       i_id2_   in integer, s_w_id2_   in integer, ol_qty2_   in integer,
       i_id3_   in integer, s_w_id3_   in integer, ol_qty3_   in integer,
       i_id4_   in integer, s_w_id4_   in integer, ol_qty4_   in integer,
       i_id5_   in integer, s_w_id5_   in integer, ol_qty5_   in integer,
       i_id6_   in integer, s_w_id6_   in integer, ol_qty6_   in integer,
       i_id7_   in integer, s_w_id7_   in integer, ol_qty7_   in integer,
       i_id8_   in integer, s_w_id8_   in integer, ol_qty8_   in integer,
       i_id9_   in integer, s_w_id9_   in integer, ol_qty9_   in integer,
       i_id10_  in integer, s_w_id10_  in integer, ol_qty10_  in integer 
)
as
  w_tax_	numeric(4,4);
  d_tax_	numeric(4,4);
  c_last_	char(16);
  c_credit_	char(2);
  c_discount_	numeric(4,4);
  i_price_	numeric(5,2);
  i_name_	char(24);
  i_data_	char(50);
  o_entry_d_	date;
  remote_flag_	integer;
  s_quantity_	integer ;
  s_data_	char(50);
  s_dist_	char(24);
  li_no_	integer;
  o_id_		integer;
  commit_flag_	integer;
  li_id_	integer;
  li_s_w_id_	integer;
  li_qty_	integer;
  ol_number_	integer;
  c_id_local_	integer;
  dif_qty_	integer;
  s_cnt_remote_	integer;
  s_dist_01_	char(24);
  s_dist_02_	char(24);
  s_dist_03_	char(24);
  s_dist_04_	char(24);
  s_dist_05_	char(24);
  s_dist_06_	char(24);
  s_dist_07_	char(24);
  s_dist_08_	char(24);
  s_dist_09_	char(24);
  s_dist_10_	char(24);
  s_s_quantity_	integer;

begin
  update DISTRICT
    set 
      D_NEXT_O_ID  = D_NEXT_O_ID + 1
    where 
      D_W_ID = w_id_ and D_ID = d_id_ 
    returning
      D_TAX,
      D_NEXT_O_ID,
      sysdate,
      0,
      1
    into
      d_tax_,
      o_id_,
      o_entry_d_,
      li_no_,
      commit_flag_;

  while li_no_ < o_ol_cnt_ loop

    li_no_ := li_no_+1;

    if li_no_ = 0  then li_id_ := i_id1_;  li_s_w_id_ := s_w_id1_;  li_qty_ := ol_qty1_; 
      elsif li_no_ = 1  then li_id_ := i_id2_;  li_s_w_id_ := s_w_id2_;  li_qty_ := ol_qty2_;
      elsif li_no_ = 2  then li_id_ := i_id3_;  li_s_w_id_ := s_w_id3_;  li_qty_ := ol_qty3_;
      elsif li_no_ = 3  then li_id_ := i_id4_;  li_s_w_id_ := s_w_id4_;  li_qty_ := ol_qty4_;
      elsif li_no_ = 4  then li_id_ := i_id5_;  li_s_w_id_ := s_w_id5_;  li_qty_ := ol_qty5_;
      elsif li_no_ = 5  then li_id_ := i_id6_;  li_s_w_id_ := s_w_id6_;  li_qty_ := ol_qty6_;
      elsif li_no_ = 6  then li_id_ := i_id7_;  li_s_w_id_ := s_w_id7_;  li_qty_ := ol_qty7_;
      elsif li_no_ = 7  then li_id_ := i_id8_;  li_s_w_id_ := s_w_id8_;  li_qty_ := ol_qty8_;
      elsif li_no_ = 8  then li_id_ := i_id9_;  li_s_w_id_ := s_w_id9_;  li_qty_ := ol_qty9_;
      elsif li_no_ = 9  then li_id_ := i_id10_; li_s_w_id_ := s_w_id10_; li_qty_ := ol_qty10_;
    end if;

    select I_PRICE, I_NAME, I_DATA
      into i_price_, i_name_, i_data_
      from ITEM
      where I_ID = li_id_ 
      for update;

    if sql%rowcount > 0 then
      begin
        if li_s_w_id_ = w_id_ 
          then 
            s_cnt_remote_ := 0; 
          else 
            s_cnt_remote_ := 1;
        end if;

        select S_QUANTITY 
          into s_s_quantity_ 
          from STOCK 
          where 
            S_I_ID = li_id_ and 
            S_W_ID = li_s_w_id_ 
          for update;
        if s_s_quantity_ - li_qty_ < 10 
          then 
            dif_qty_ := 91; 
          else 
            dif_qty_ := 0; 
        end if;

        update STOCK 
          set 
            S_YTD = S_YTD + li_qty_,
            S_QUANTITY   = S_QUANTITY - li_qty_ + dif_qty_,
            S_CNT_ORDER  = S_CNT_ORDER + 1,
            S_CNT_REMOTE = S_CNT_REMOTE + s_cnt_remote_
          where 
            S_I_ID = li_id_ and 
            S_W_ID = li_s_w_id_
          returning
            S_QUANTITY,
            S_DATA,
            S_DIST_01,
            S_DIST_02,
            S_DIST_03,
            S_DIST_04,
            S_DIST_05,
            S_DIST_06,
            S_DIST_07,
            S_DIST_08,
            S_DIST_09,
            S_DIST_10
          into
            s_quantity_,
            s_data_,
            s_dist_01_,
            s_dist_02_,
            s_dist_03_,
            s_dist_04_,
            s_dist_05_,
            s_dist_06_,
            s_dist_07_,
            s_dist_08_,
            s_dist_09_,
            s_dist_10_;

        if d_id_ = 1  then s_dist_ := s_dist_01_;
          elsif d_id_ = 2  then s_dist_ := s_dist_02_;
          elsif d_id_ = 3  then s_dist_ := s_dist_03_;
          elsif d_id_ = 4  then s_dist_ := s_dist_04_;
          elsif d_id_ = 5  then s_dist_ := s_dist_05_;
          elsif d_id_ = 6  then s_dist_ := s_dist_06_;
          elsif d_id_ = 7  then s_dist_ := s_dist_07_;
          elsif d_id_ = 8  then s_dist_ := s_dist_08_;
          elsif d_id_ = 9  then s_dist_ := s_dist_09_;
          elsif d_id_ = 10 then s_dist_ := s_dist_10_;
        end if;


        insert into ORDER_LINE
          values (
            o_id_,
            d_id_,
            w_id_,
            li_no_,
            li_id_,
            li_s_w_id_,
            '31-DEC-80',
            li_qty_,
            i_price_ * li_qty_,
            s_dist_);
      end;
    else
      commit_flag_ := 0;
    end if;
  end loop;

  select 
      C_LAST,
      C_DISCOUNT,
      C_CREDIT,
      C_ID
    into
      c_last_,
      c_discount_,
      c_credit_,
      c_id_local_
    from CUSTOMER
    where 
      C_ID    = c_id_ and
      C_W_ID  = w_id_ and
      C_D_ID  = d_id_ 
    for update;

  insert into ORDERS 
    values (
        o_id_, 
        d_id_, 
        w_id_, 
        c_id_local_,
        o_entry_d_, 
        0, 
        o_ol_cnt_, 
        o_all_local_);

  insert into NEW_ORDER 
    values (o_id_, d_id_, w_id_);

  select W_TAX 
    into w_tax_
    from WAREHOUSE
    where W_ID = w_id_ 
    for update;

  if commit_flag_ = 1 
    then
      commit;
    else
      rollback;
  end if;

end new_order_proc;
;

create or replace procedure delivery  ( w_id_ in integer, o_carrier_id_ in integer )
as
  d_id_		integer;
  o_id_		integer;
  c_id_		integer;
  total_	numeric(12,2);
  oid1_		integer;
  oid2_		integer;
  oid3_		integer;
  oid4_		integer;
  oid5_		integer;
  oid6_		integer;
  oid7_		integer;
  oid8_		integer;
  oid9_		integer;
  oid10_	integer;
  ol_total_	numeric(12,2);
begin
  d_id_ := 0;
  while d_id_ < 10 loop
    d_id_  := d_id_ + 1;
    total_ := 0;
    o_id_  := 0;

    select min(NO_O_ID)
      into o_id_
      from NEW_ORDER
      where 
        NO_W_ID = w_id_ and 
	NO_D_ID = d_id_;


    if(sql%rowcount <> 0) 
      then
        delete from NEW_ORDER
	  where 
	    NO_W_ID = w_id_ and 
	    NO_D_ID = d_id_ and 
	    NO_O_ID = o_id_;

	update ORDERS
	  set O_CARRIER_ID = o_carrier_id_
	  where 
	    O_W_ID = w_id_ and 
	    O_D_ID = d_id_ and 
	    O_ID = o_id_ 
	  returning O_C_ID 
	  into c_id_;

        ol_total_ := 0;

	update ORDER_LINE
	  set OL_DELIVERY_D = sysdate
	  where 
	    OL_W_ID = w_id_ and
	    OL_D_ID = d_id_ and
	    OL_O_ID = o_id_;

	select sum(OL_AMOUNT) 
          into ol_total_
	  from ORDER_LINE  
	  where 
	    OL_W_ID = w_id_ and
	    OL_D_ID = d_id_ and
	    OL_O_ID = o_id_;

							 
        total_ := total_ + ol_total_;

	update CUSTOMER
	  set 
	    C_BALANCE      = C_BALANCE + total_,
	    C_CNT_DELIVERY = C_CNT_DELIVERY + 1
	  where 
	    C_W_ID = w_id_ and
	    C_D_ID = d_id_ and
	    C_ID = c_id_;

      end if;


    if d_id_ = 1 then oid1_ := o_id_; 
      elsif d_id_ = 2  then oid2_ := o_id_; 
      elsif d_id_ = 3  then oid3_ := o_id_; 
      elsif d_id_ = 4  then oid4_ := o_id_; 
      elsif d_id_ = 5  then oid5_ := o_id_; 
      elsif d_id_ = 6  then oid6_ := o_id_; 
      elsif d_id_ = 7  then oid7_ := o_id_; 
      elsif d_id_ = 8  then oid8_ := o_id_; 
      elsif d_id_ = 9  then oid9_ := o_id_; 
      elsif d_id_ = 10 then oid10_ := o_id_; 
    end if;


  end loop;

  commit;

end delivery;
;


create or replace procedure payment (
       w_id_         in integer,
       c_w_id_       in integer,
       h_amount_     in float,
       d_id_         in integer,
       c_d_id_       in integer,
       c_c_id_       in integer,
       c_c_last_     in varchar )
as
  type tc_byname is ref cursor;
  w_street_1_    char(20);
  w_street_2_    char(20);
  w_city_        char(20);
  w_state_       char(2);
  w_zip_         char(9);
  w_name_        char(10);
  d_street_1_    char(20);
  d_street_2_    char(20);
  d_city_        char(20);
  d_state_       char(2);
  d_zip_         char(9);
  d_name_        char(10);
  c_first_       char(16);
  c_middle_      char(2);
  c_street_1_    char(20);
  c_street_2_    char(20);
  c_city_        char(20);
  c_state_       char(2);
  c_zip_         char(9);
  c_phone_       char(16);
  c_since_       date;
  c_credit_      char(2);
  c_credit_lim_  float;
  c_balance_     float;
  c_ytd_payment_ float;
  c_discount_    float;
  data1_         char(250);
  data2_         char(250);
  c_data_1_      char(250);
  c_data_2_      char(250);
  w_ytd_         float;
  d_ytd_         float;
  cnt_           integer ;
  val_           integer ;
  screen_data_   char(200);
  d_id_local_    integer ;
  w_id_local_    integer ;
  c_id_local_    integer;
  rowcount_	 integer;
  c_id_		 integer;
  c_last_	 varchar(50);
  n		 integer;
  c_byname	 tc_byname;

begin
  screen_data_ := '';
  c_id_ := c_c_id_;
  c_last_ := c_c_last_;

  if c_id_ = 0 
    then
      select count(*)
        into cnt_
        from CUSTOMER
        where 
	  C_LAST = c_last_ and
	  C_W_ID = c_w_id_ and
	  C_D_ID = c_d_id_;

      val_ := (cnt_ + 1) / 2;
      rowcount_ := val_;

      open c_byname 
        for 
	  select   C_ID
	    from CUSTOMER
	    where 
	      C_LAST = c_last_ and
	      C_W_ID = c_w_id_ and
	      C_D_ID = c_d_id_
	    order by 
	      C_W_ID, 
	      C_D_ID, 
	      C_LAST, 
	      C_FIRST 
	    for update;

	while n <= cnt_/2 loop
	  fetch c_byname into c_id_;
          n := n + 1;
	end loop;
	close c_byname;

        rowcount_ := 0;
  end if;

  update CUSTOMER 
    set
      C_BALANCE  = c_balance_,
      C_CNT_PAYMENT    = c_cnt_payment + 1
    where 
      C_ID   = c_id_   and
      C_W_ID = c_w_id_ and
      C_D_ID = c_d_id_
    returning
      C_BALANCE - h_amount_,
      C_YTD_PAYMENT + 10.0,
      C_FIRST,
      C_MIDDLE,
      C_LAST,
      C_STREET_1,
      C_STREET_2,
      C_CITY,
      C_STATE,
      C_ZIP,
      C_PHONE,
      C_CREDIT,
      C_CREDIT_LIM,
      C_DISCOUNT,
      C_SINCE,
      C_DATA_1,
      C_DATA_2,
      C_ID
    into
      c_balance_,
      c_ytd_payment_,
      c_first_,
      c_middle_,
      c_last_,
      c_street_1_,
      c_street_2_,
      c_city_,
      c_state_,
      c_zip_,
      c_phone_,
      c_credit_,
      c_credit_lim_,
      c_discount_,
      c_since_,
      data1_,
      data2_,
      c_id_local_;

  if c_credit_ = 'BC' 
    then
      c_data_2_ := substr(data1_,209,42) || substr(data2_,1,208);

      c_data_1_ := to_char( c_id_ ) ||
                   to_char( c_d_id_) ||
                   to_char( c_w_id_) ||
                   to_char( d_id_) ||
                   to_char( w_id_) ||
                   to_char( h_amount_) ||
                   substr(data1_, 1, 208);

      update CUSTOMER 
        set
	  C_DATA_1 = c_data_1_,
	  C_DATA_2 = c_data_2_
	where 
	  C_ID   = c_id_ and
	  C_W_ID = c_w_id_ and
	  C_D_ID = c_d_id_;

      screen_data_ := substr(c_data_1_,1,200);

    end if;

  update DISTRICT
    set		
      D_YTD   = D_YTD + h_amount_
    where	
      D_W_ID	= w_id_ and
      D_ID	= d_id_
    returning 
      D_STREET_1,
      D_STREET_2,
      D_CITY,
      D_STATE,
      D_ZIP,
      D_NAME,
      D_ID
    into
      d_street_1_,
      d_street_2_,
      d_city_,
      d_state_,
      d_zip_,
      d_name_,
      d_id_local_;


  update WAREHOUSE
    set		
      W_YTD   = W_YTD + h_amount_
    where	
      W_ID    = w_id_
    returning
      W_STREET_1,
      W_STREET_2,
      W_CITY,
      W_STATE,
      W_ZIP,
      W_NAME,
      W_ID
    into
      w_street_1_,
      w_street_2_,
      w_city_,
      w_state_,
      w_zip_,
      w_name_,
      w_id_local_;


  insert into THISTORY
    values (
      c_id_local_,
      c_d_id_,
      c_w_id_,
      d_id_local_,
      w_id_local_,
      sysdate,
      h_amount_,
      w_name_ || '    ' || d_name_);

  commit;

end payment;
;


create or replace procedure ostat (
       w_id_           in integer,
       d_id_           in integer,
       c_c_id_         in integer,
       c_c_last_       in varchar
)
as
  type tc_byname is ref cursor;
  c_balance_     numeric(12,2);
  c_first_       char(16);
  c_middle_      char(2);
  o_id_          integer;
  o_entry_d_     date;
  o_carrier_id_  integer;
  cnt_           integer;
  rowcount_	 integer;

  c_id_          integer;
  c_last_        char(16);
  c_byname	 tc_byname;
  n		 integer;	
						
begin
  c_id_ := c_c_id_;
  c_last_ := c_c_last_;

  if c_id_ = 0 
    then
      select (count(*)+1)/2
        into cnt_
	from CUSTOMER
	where 
	  C_LAST = c_last_ and
	  C_W_ID = w_id_ and
	  C_D_ID = d_id_;

      rowcount_ := cnt_;

      open c_byname for 
        select 
	    C_ID,
	    C_BALANCE,
	    C_FIRST,
	    C_LAST,
	    C_MIDDLE
	  from CUSTOMER
	  where 
	    C_LAST = c_last_ and
	    C_W_ID = w_id_   and
	    C_D_ID = d_id_
	  order by 
	    C_W_ID, 
	    C_D_ID, 
	    C_LAST, 
	    C_FIRST
	  for update;

      while n <= cnt_ loop
        fetch c_byname 
	  into
	    c_id_,
	    c_balance_,
	    c_first_,
	    c_last_,
	    c_middle_;
			    
	n := n + 1;
      end loop;
		
      rowcount_ := 0;

    else

      select 
          C_BALANCE,
	  C_FIRST,
	  C_MIDDLE,
	  C_LAST
	into
	  c_balance_,
	  c_first_,
	  c_middle_,
	  c_last_
	from CUSTOMER
	where 
	  C_ID   = c_id_ and
	  C_D_ID = d_id_ and
	  C_W_ID = w_id_
	for update;

      cnt_ := sql%rowcount;
      rowcount_ := cnt_;
  end if;

  commit;
end ostat;
;

create or replace procedure slevel (
    w_id  in integer,
    d_id_  in integer,
    threshold  in integer)
as
  last_o integer; 
  n_items integer;

begin
  set transaction isolation level read committed;

  select D_NEXT_O_ID 
    into last_o
    from DISTRICT
    where 
      D_W_ID = w_id and 
      D_ID = d_id_; 

  select count (distinct S_I_ID) 
    into n_items
    from 
      ORDER_LINE, 
      STOCK
    where 
      OL_W_ID = w_id and 
      OL_D_ID = d_id_ and 
      OL_O_ID < last_o and 
      OL_O_ID >= last_o - 20 and 
      S_W_ID = w_id and 
      S_I_ID = OL_I_ID and 
      S_QUANTITY < threshold; 

  commit;
end slevel;
;
